$wnd.web.runAsyncCallback5("function Vkg(){}\nfunction slg(){slg=EXb;Fkg=new Vkg}\nvar Fkg;DXb(1930,1,wei,Vkg);_.Jf=function(){return 'jasmidJs'};_.Kf=function(){return \"/*\\nclass to parse the .mid file format\\n(depends on stream.js)\\n*/\\nfunction MidiFile(data) {\\n\\tfunction readChunk(stream) {\\n\\t\\tvar id = stream.read(4);\\n\\t\\tvar length = stream.readInt32();\\n\\t\\treturn {\\n\\t\\t\\t'id': id,\\n\\t\\t\\t'length': length,\\n\\t\\t\\t'data': stream.read(length)\\n\\t\\t};\\n\\t}\\n\\t\\n\\tvar lastEventTypeByte;\\n\\t\\n\\tfunction readEvent(stream) {\\n\\t\\tvar event = {};\\n\\t\\tevent.deltaTime = stream.readVarInt();\\n\\t\\tvar eventTypeByte = stream.readInt8();\\n\\t\\tif ((eventTypeByte & 0xf0) == 0xf0) {\\n\\t\\t\\t/* system / meta event */\\n\\t\\t\\tif (eventTypeByte == 0xff) {\\n\\t\\t\\t\\t/* meta event */\\n\\t\\t\\t\\tevent.type = 'meta';\\n\\t\\t\\t\\tvar subtypeByte = stream.readInt8();\\n\\t\\t\\t\\tvar length = stream.readVarInt();\\n\\t\\t\\t\\tswitch(subtypeByte) {\\n\\t\\t\\t\\t\\tcase 0x00:\\n\\t\\t\\t\\t\\t\\tevent.subtype = 'sequenceNumber';\\n\\t\\t\\t\\t\\t\\tif (length != 2) throw \\\"Expected length for sequenceNumber event is 2, got \\\" + length;\\n\\t\\t\\t\\t\\t\\tevent.number = stream.readInt16();\\n\\t\\t\\t\\t\\t\\treturn event;\\n\\t\\t\\t\\t\\tcase 0x01:\\n\\t\\t\\t\\t\\t\\tevent.subtype = 'text';\\n\\t\\t\\t\\t\\t\\tevent.text = stream.read(length);\\n\\t\\t\\t\\t\\t\\treturn event;\\n\\t\\t\\t\\t\\tcase 0x02:\\n\\t\\t\\t\\t\\t\\tevent.subtype = 'copyrightNotice';\\n\\t\\t\\t\\t\\t\\tevent.text = stream.read(length);\\n\\t\\t\\t\\t\\t\\treturn event;\\n\\t\\t\\t\\t\\tcase 0x03:\\n\\t\\t\\t\\t\\t\\tevent.subtype = 'trackName';\\n\\t\\t\\t\\t\\t\\tevent.text = stream.read(length);\\n\\t\\t\\t\\t\\t\\treturn event;\\n\\t\\t\\t\\t\\tcase 0x04:\\n\\t\\t\\t\\t\\t\\tevent.subtype = 'instrumentName';\\n\\t\\t\\t\\t\\t\\tevent.text = stream.read(length);\\n\\t\\t\\t\\t\\t\\treturn event;\\n\\t\\t\\t\\t\\tcase 0x05:\\n\\t\\t\\t\\t\\t\\tevent.subtype = 'lyrics';\\n\\t\\t\\t\\t\\t\\tevent.text = stream.read(length);\\n\\t\\t\\t\\t\\t\\treturn event;\\n\\t\\t\\t\\t\\tcase 0x06:\\n\\t\\t\\t\\t\\t\\tevent.subtype = 'marker';\\n\\t\\t\\t\\t\\t\\tevent.text = stream.read(length);\\n\\t\\t\\t\\t\\t\\treturn event;\\n\\t\\t\\t\\t\\tcase 0x07:\\n\\t\\t\\t\\t\\t\\tevent.subtype = 'cuePoint';\\n\\t\\t\\t\\t\\t\\tevent.text = stream.read(length);\\n\\t\\t\\t\\t\\t\\treturn event;\\n\\t\\t\\t\\t\\tcase 0x20:\\n\\t\\t\\t\\t\\t\\tevent.subtype = 'midiChannelPrefix';\\n\\t\\t\\t\\t\\t\\tif (length != 1) throw \\\"Expected length for midiChannelPrefix event is 1, got \\\" + length;\\n\\t\\t\\t\\t\\t\\tevent.channel = stream.readInt8();\\n\\t\\t\\t\\t\\t\\treturn event;\\n\\t\\t\\t\\t\\tcase 0x2f:\\n\\t\\t\\t\\t\\t\\tevent.subtype = 'endOfTrack';\\n\\t\\t\\t\\t\\t\\tif (length != 0) throw \\\"Expected length for endOfTrack event is 0, got \\\" + length;\\n\\t\\t\\t\\t\\t\\treturn event;\\n\\t\\t\\t\\t\\tcase 0x51:\\n\\t\\t\\t\\t\\t\\tevent.subtype = 'setTempo';\\n\\t\\t\\t\\t\\t\\tif (length != 3) throw \\\"Expected length for setTempo event is 3, got \\\" + length;\\n\\t\\t\\t\\t\\t\\tevent.microsecondsPerBeat = (\\n\\t\\t\\t\\t\\t\\t\\t(stream.readInt8() << 16)\\n\\t\\t\\t\\t\\t\\t\\t+ (stream.readInt8() << 8)\\n\\t\\t\\t\\t\\t\\t\\t+ stream.readInt8()\\n\\t\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t\\treturn event;\\n\\t\\t\\t\\t\\tcase 0x54:\\n\\t\\t\\t\\t\\t\\tevent.subtype = 'smpteOffset';\\n\\t\\t\\t\\t\\t\\tif (length != 5) throw \\\"Expected length for smpteOffset event is 5, got \\\" + length;\\n\\t\\t\\t\\t\\t\\tvar hourByte = stream.readInt8();\\n\\t\\t\\t\\t\\t\\tevent.frameRate = {\\n\\t\\t\\t\\t\\t\\t\\t0x00: 24, 0x20: 25, 0x40: 29, 0x60: 30\\n\\t\\t\\t\\t\\t\\t}[hourByte & 0x60];\\n\\t\\t\\t\\t\\t\\tevent.hour = hourByte & 0x1f;\\n\\t\\t\\t\\t\\t\\tevent.min = stream.readInt8();\\n\\t\\t\\t\\t\\t\\tevent.sec = stream.readInt8();\\n\\t\\t\\t\\t\\t\\tevent.frame = stream.readInt8();\\n\\t\\t\\t\\t\\t\\tevent.subframe = stream.readInt8();\\n\\t\\t\\t\\t\\t\\treturn event;\\n\\t\\t\\t\\t\\tcase 0x58:\\n\\t\\t\\t\\t\\t\\tevent.subtype = 'timeSignature';\\n\\t\\t\\t\\t\\t\\tif (length != 4) throw \\\"Expected length for timeSignature event is 4, got \\\" + length;\\n\\t\\t\\t\\t\\t\\tevent.numerator = stream.readInt8();\\n\\t\\t\\t\\t\\t\\tevent.denominator = Math.pow(2, stream.readInt8());\\n\\t\\t\\t\\t\\t\\tevent.metronome = stream.readInt8();\\n\\t\\t\\t\\t\\t\\tevent.thirtyseconds = stream.readInt8();\\n\\t\\t\\t\\t\\t\\treturn event;\\n\\t\\t\\t\\t\\tcase 0x59:\\n\\t\\t\\t\\t\\t\\tevent.subtype = 'keySignature';\\n\\t\\t\\t\\t\\t\\tif (length != 2) throw \\\"Expected length for keySignature event is 2, got \\\" + length;\\n\\t\\t\\t\\t\\t\\tevent.key = stream.readInt8(true);\\n\\t\\t\\t\\t\\t\\tevent.scale = stream.readInt8();\\n\\t\\t\\t\\t\\t\\treturn event;\\n\\t\\t\\t\\t\\tcase 0x7f:\\n\\t\\t\\t\\t\\t\\tevent.subtype = 'sequencerSpecific';\\n\\t\\t\\t\\t\\t\\tevent.data = stream.read(length);\\n\\t\\t\\t\\t\\t\\treturn event;\\n\\t\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\t\\t// console.log(\\\"Unrecognised meta event subtype: \\\" + subtypeByte);\\n\\t\\t\\t\\t\\t\\tevent.subtype = 'unknown'\\n\\t\\t\\t\\t\\t\\tevent.data = stream.read(length);\\n\\t\\t\\t\\t\\t\\treturn event;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tevent.data = stream.read(length);\\n\\t\\t\\t\\treturn event;\\n\\t\\t\\t} else if (eventTypeByte == 0xf0) {\\n\\t\\t\\t\\tevent.type = 'sysEx';\\n\\t\\t\\t\\tvar length = stream.readVarInt();\\n\\t\\t\\t\\tevent.data = stream.read(length);\\n\\t\\t\\t\\treturn event;\\n\\t\\t\\t} else if (eventTypeByte == 0xf7) {\\n\\t\\t\\t\\tevent.type = 'dividedSysEx';\\n\\t\\t\\t\\tvar length = stream.readVarInt();\\n\\t\\t\\t\\tevent.data = stream.read(length);\\n\\t\\t\\t\\treturn event;\\n\\t\\t\\t} else if (eventTypeByte == 0xfd) {\\n\\t\\t\\t\\tevent.subtype = 'undefined_fld1';\\n\\t\\t\\t\\tevent.value = param1;\\n\\t\\t\\t\\treturn event;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthrow \\\"Unrecognised MIDI event type byte: \\\" + eventTypeByte;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\t/* channel event */\\n\\t\\t\\tvar param1;\\n\\t\\t\\tif ((eventTypeByte & 0x80) == 0) {\\n\\t\\t\\t\\t/* running status - reuse lastEventTypeByte as the event type.\\n\\t\\t\\t\\t\\teventTypeByte is actually the first parameter\\n\\t\\t\\t\\t*/\\n\\t\\t\\t\\tparam1 = eventTypeByte;\\n\\t\\t\\t\\teventTypeByte = lastEventTypeByte;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tparam1 = stream.readInt8();\\n\\t\\t\\t\\tlastEventTypeByte = eventTypeByte;\\n\\t\\t\\t}\\n\\t\\t\\tvar eventType = eventTypeByte >> 4;\\n\\t\\t\\tevent.channel = eventTypeByte & 0x0f;\\n\\t\\t\\tevent.type = 'channel';\\n\\t\\t\\tswitch (eventType) {\\n\\t\\t\\t\\tcase 0x08:\\n\\t\\t\\t\\t\\tevent.subtype = 'noteOff';\\n\\t\\t\\t\\t\\tevent.noteNumber = param1;\\n\\t\\t\\t\\t\\tevent.velocity = stream.readInt8();\\n\\t\\t\\t\\t\\treturn event;\\n\\t\\t\\t\\tcase 0x09:\\n\\t\\t\\t\\t\\tevent.noteNumber = param1;\\n\\t\\t\\t\\t\\tevent.velocity = stream.readInt8();\\n\\t\\t\\t\\t\\tif (event.velocity == 0) {\\n\\t\\t\\t\\t\\t\\tevent.subtype = 'noteOff';\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tevent.subtype = 'noteOn';\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn event;\\n\\t\\t\\t\\tcase 0x0a:\\n\\t\\t\\t\\t\\tevent.subtype = 'noteAftertouch';\\n\\t\\t\\t\\t\\tevent.noteNumber = param1;\\n\\t\\t\\t\\t\\tevent.amount = stream.readInt8();\\n\\t\\t\\t\\t\\treturn event;\\n\\t\\t\\t\\tcase 0x0b:\\n\\t\\t\\t\\t\\tevent.subtype = 'controller';\\n\\t\\t\\t\\t\\tevent.controllerType = param1;\\n\\t\\t\\t\\t\\tevent.value = stream.readInt8();\\n\\t\\t\\t\\t\\treturn event;\\n\\t\\t\\t\\tcase 0x0c:\\n\\t\\t\\t\\t\\tevent.subtype = 'programChange';\\n\\t\\t\\t\\t\\tevent.programNumber = param1;\\n\\t\\t\\t\\t\\treturn event;\\n\\t\\t\\t\\tcase 0x0d:\\n\\t\\t\\t\\t\\tevent.subtype = 'channelAftertouch';\\n\\t\\t\\t\\t\\tevent.amount = param1;\\n\\t\\t\\t\\t\\treturn event;\\n\\t\\t\\t\\tcase 0x0e:\\n\\t\\t\\t\\t\\tevent.subtype = 'pitchBend';\\n\\t\\t\\t\\t\\tevent.value = param1 + (stream.readInt8() << 7);\\n\\t\\t\\t\\t\\treturn event;\\n\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\tthrow \\\"Unrecognised MIDI event type: \\\" + eventType\\n\\t\\t\\t\\t\\t/* \\n\\t\\t\\t\\t\\tconsole.log(\\\"Unrecognised MIDI event type: \\\" + eventType);\\n\\t\\t\\t\\t\\tstream.readInt8();\\n\\t\\t\\t\\t\\tevent.subtype = 'unknown';\\n\\t\\t\\t\\t\\treturn event;\\n\\t\\t\\t\\t\\t*/\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t\\n\\tstream = Stream(data);\\n\\tvar headerChunk = readChunk(stream);\\n\\tif (headerChunk.id != 'MThd' || headerChunk.length != 6) {\\n\\t\\tthrow \\\"Bad .mid file - header not found\\\";\\n\\t}\\n\\tvar headerStream = Stream(headerChunk.data);\\n\\tvar formatType = headerStream.readInt16();\\n\\tvar trackCount = headerStream.readInt16();\\n\\tvar timeDivision = headerStream.readInt16();\\n\\t\\n\\tif (timeDivision & 0x8000) {\\n\\t\\tthrow \\\"Expressing time division in SMTPE frames is not supported yet\\\"\\n\\t} else {\\n\\t\\tticksPerBeat = timeDivision;\\n\\t}\\n\\t\\n\\tvar header = {\\n\\t\\t'formatType': formatType,\\n\\t\\t'trackCount': trackCount,\\n\\t\\t'ticksPerBeat': ticksPerBeat\\n\\t}\\n\\tvar tracks = [];\\n\\tfor (var i = 0; i < header.trackCount; i++) {\\n\\t\\ttracks[i] = [];\\n\\t\\tvar trackChunk = readChunk(stream);\\n\\t\\tif (trackChunk.id != 'MTrk') {\\n\\t\\t\\tthrow \\\"Unexpected chunk - expected MTrk, got \\\"+ trackChunk.id;\\n\\t\\t}\\n\\t\\tvar trackStream = Stream(trackChunk.data);\\n\\t\\twhile (!trackStream.eof()) {\\n\\t\\t\\tvar event = readEvent(trackStream);\\n\\t\\t\\ttracks[i].push(event);\\n\\t\\t\\t//console.log(event);\\n\\t\\t}\\n\\t}\\n\\t\\n\\treturn {\\n\\t\\t'header': header,\\n\\t\\t'tracks': tracks\\n\\t}\\n}\\r\\nvar clone = function (o) {\\n\\tif (typeof o != 'object') return (o);\\n\\tif (o == null) return (o);\\n\\tvar ret = (typeof o.length == 'number') ? [] : {};\\n\\tfor (var key in o) ret[key] = clone(o[key]);\\n\\treturn ret;\\n};\\n\\nfunction Replayer(midiFile, timeWarp, eventProcessor, bpm) {\\n\\tvar trackStates = [];\\n\\tvar beatsPerMinute = bpm ? bpm : 120;\\n\\tvar bpmOverride = bpm ? true : false;\\n\\n\\tvar ticksPerBeat = midiFile.header.ticksPerBeat;\\n\\t\\n\\tfor (var i = 0; i < midiFile.tracks.length; i++) {\\n\\t\\ttrackStates[i] = {\\n\\t\\t\\t'nextEventIndex': 0,\\n\\t\\t\\t'ticksToNextEvent': (\\n\\t\\t\\t\\tmidiFile.tracks[i].length ?\\n\\t\\t\\t\\t\\tmidiFile.tracks[i][0].deltaTime :\\n\\t\\t\\t\\t\\tnull\\n\\t\\t\\t)\\n\\t\\t};\\n\\t}\\n\\n\\tvar nextEventInfo;\\n\\tvar samplesToNextEvent = 0;\\n\\t\\n\\tfunction getNextEvent() {\\n\\t\\tvar ticksToNextEvent = null;\\n\\t\\tvar nextEventTrack = null;\\n\\t\\tvar nextEventIndex = null;\\n\\t\\t\\n\\t\\tfor (var i = 0; i < trackStates.length; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\ttrackStates[i].ticksToNextEvent != null\\n\\t\\t\\t\\t&& (ticksToNextEvent == null || trackStates[i].ticksToNextEvent < ticksToNextEvent)\\n\\t\\t\\t) {\\n\\t\\t\\t\\tticksToNextEvent = trackStates[i].ticksToNextEvent;\\n\\t\\t\\t\\tnextEventTrack = i;\\n\\t\\t\\t\\tnextEventIndex = trackStates[i].nextEventIndex;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (nextEventTrack != null) {\\n\\t\\t\\t/* consume event from that track */\\n\\t\\t\\tvar nextEvent = midiFile.tracks[nextEventTrack][nextEventIndex];\\n\\t\\t\\tif (midiFile.tracks[nextEventTrack][nextEventIndex + 1]) {\\n\\t\\t\\t\\ttrackStates[nextEventTrack].ticksToNextEvent += midiFile.tracks[nextEventTrack][nextEventIndex + 1].deltaTime;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\ttrackStates[nextEventTrack].ticksToNextEvent = null;\\n\\t\\t\\t}\\n\\t\\t\\ttrackStates[nextEventTrack].nextEventIndex += 1;\\n\\t\\t\\t/* advance timings on all tracks by ticksToNextEvent */\\n\\t\\t\\tfor (var i = 0; i < trackStates.length; i++) {\\n\\t\\t\\t\\tif (trackStates[i].ticksToNextEvent != null) {\\n\\t\\t\\t\\t\\ttrackStates[i].ticksToNextEvent -= ticksToNextEvent\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn {\\n\\t\\t\\t\\t\\\"ticksToEvent\\\": ticksToNextEvent,\\n\\t\\t\\t\\t\\\"event\\\": nextEvent,\\n\\t\\t\\t\\t\\\"track\\\": nextEventTrack\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t};\\n\\t//\\n\\tvar midiEvent;\\n\\tvar temporal = [];\\n\\t//\\n\\tfunction processEvents() {\\n\\t\\tfunction processNext() {\\n\\t\\t    if (!bpmOverride && midiEvent.event.type == \\\"meta\\\" && midiEvent.event.subtype == \\\"setTempo\\\" ) {\\n\\t\\t\\t\\t// tempo change events can occur anywhere in the middle and affect events that follow\\n\\t\\t\\t\\tbeatsPerMinute = 60000000 / midiEvent.event.microsecondsPerBeat;\\n\\t\\t\\t}\\n\\t\\t\\t///\\n\\t\\t\\tvar beatsToGenerate = 0;\\n\\t\\t\\tvar secondsToGenerate = 0;\\n\\t\\t\\tif (midiEvent.ticksToEvent > 0) {\\n\\t\\t\\t\\tbeatsToGenerate = midiEvent.ticksToEvent / ticksPerBeat;\\n\\t\\t\\t\\tsecondsToGenerate = beatsToGenerate / (beatsPerMinute / 60);\\n\\t\\t\\t}\\n\\t\\t\\t///\\n\\t\\t\\tvar time = (secondsToGenerate * 1000 * timeWarp) || 0;\\n\\t\\t\\ttemporal.push([ midiEvent, time]);\\n\\t\\t\\tmidiEvent = getNextEvent();\\n\\t\\t};\\n\\t\\t///\\n\\t\\tif (midiEvent = getNextEvent()) {\\n\\t\\t\\twhile(midiEvent) processNext(true);\\n\\t\\t}\\n\\t};\\n\\tprocessEvents();\\n\\treturn {\\n\\t\\t\\\"getData\\\": function() {\\n\\t\\t\\treturn clone(temporal);\\n\\t\\t}\\n\\t};\\n};\\n\\r\\n/* Wrapper for accessing strings through sequential reads */\\nfunction Stream(str) {\\n\\tvar position = 0;\\n\\t\\n\\tfunction read(length) {\\n\\t\\tvar result = str.substr(position, length);\\n\\t\\tposition += length;\\n\\t\\treturn result;\\n\\t}\\n\\t\\n\\t/* read a big-endian 32-bit integer */\\n\\tfunction readInt32() {\\n\\t\\tvar result = (\\n\\t\\t\\t(str.charCodeAt(position) << 24)\\n\\t\\t\\t+ (str.charCodeAt(position + 1) << 16)\\n\\t\\t\\t+ (str.charCodeAt(position + 2) << 8)\\n\\t\\t\\t+ str.charCodeAt(position + 3));\\n\\t\\tposition += 4;\\n\\t\\treturn result;\\n\\t}\\n\\n\\t/* read a big-endian 16-bit integer */\\n\\tfunction readInt16() {\\n\\t\\tvar result = (\\n\\t\\t\\t(str.charCodeAt(position) << 8)\\n\\t\\t\\t+ str.charCodeAt(position + 1));\\n\\t\\tposition += 2;\\n\\t\\treturn result;\\n\\t}\\n\\t\\n\\t/* read an 8-bit integer */\\n\\tfunction readInt8(signed) {\\n\\t\\tvar result = str.charCodeAt(position);\\n\\t\\tif (signed && result > 127) result -= 256;\\n\\t\\tposition += 1;\\n\\t\\treturn result;\\n\\t}\\n\\t\\n\\tfunction eof() {\\n\\t\\treturn position >= str.length;\\n\\t}\\n\\t\\n\\t/* read a MIDI-style variable-length integer\\n\\t\\t(big-endian value in groups of 7 bits,\\n\\t\\twith top bit set to signify that another byte follows)\\n\\t*/\\n\\tfunction readVarInt() {\\n\\t\\tvar result = 0;\\n\\t\\twhile (true) {\\n\\t\\t\\tvar b = readInt8();\\n\\t\\t\\tif (b & 0x80) {\\n\\t\\t\\t\\tresult += (b & 0x7f);\\n\\t\\t\\t\\tresult <<= 7;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t/* b is the last byte */\\n\\t\\t\\t\\treturn result + b;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t\\n\\treturn {\\n\\t\\t'eof': eof,\\n\\t\\t'read': read,\\n\\t\\t'readInt32': readInt32,\\n\\t\\t'readInt16': readInt16,\\n\\t\\t'readInt8': readInt8,\\n\\t\\t'readVarInt': readVarInt\\n\\t}\\n}\"};var Xvb=_pc(1930);DXb(4596,1,oKi);_.Nd=function(){kFf();zcg();!!xcg&&eFg(xcg,xcg.c,'[MIDIPLAYER]jasmid.js loading success');bwg((slg(),Fkg));this.a.a=true};oai(Bk)(5);\n//# sourceURL=web-5.js\n")
